import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from database.read import get_requests
from db import AsyncSessionLocal, get_async_session
from routes.bot_router import approve_request, reject_request
from core.config import settings

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

pending_requests = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    if message.chat.id == settings.TELEGRAM_ADMIN_CHAT_ID:
        pending_requests.clear()
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

@dp.message(Command("requests"))
async def start_command(message: types.Message):
    await message.answer("üî® –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞—è–≤–∫–∏...")
    async with AsyncSessionLocal() as session:
        try:
            requests = await get_requests(session)
            response = "\n".join(
                f"ID: {req.id}\n–î–∞–Ω–Ω—ã–µ: {req.data}\n–î–∞—Ç–∞: {req.created_at}\n"
                for req in requests
            )
            await message.answer(response or "–ù–µ—Ç –∑–∞—è–≤–æ–∫")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(e)


async def send_university_request(university_data, request_id: int):
    contacts_text = f"<b>üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
    emoji_dict = {
        'email' : '‚úâÔ∏è',
        'phone' : 'üìû'
    }
    
    
    for i in university_data.baseInfo.contacts:
        contacts_text+=f"  <b>{i.name}</b>\n"
        contacts_text+=f"    {emoji_dict[i.type]} {i.value}\n"
    
    message_text = (
        "<b>üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –í–£–ó–∞</b>:\n\n"
        f"<b>üèõÔ∏è –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {university_data.baseInfo.fullName}\n"
        f"<b>üîñ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {university_data.baseInfo.shortName}\n"
        f"<b>üè∑Ô∏è –¢–µ–≥:</b> {university_data.baseInfo.universityTag}\n\n"
        f"{contacts_text}\n"
        f"<b>üìç –ê–¥—Ä–µ—Å:</b> {university_data.baseInfo.address}\n"
        f"<b>üìå ID –∑–∞–ø—Ä–æ—Å–∞:</b> {request_id}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
        ]
    ])
    
    pending_requests[request_id] = university_data
    
    await bot.send_message(
        chat_id=settings.TELEGRAM_ADMIN_CHAT_ID,
        text=message_text,
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def handle_approval(callback_query: types.CallbackQuery):
    request_id = int(callback_query.data.split('_')[1])
    action = callback_query.data.split('_')[0]
    
    if request_id not in pending_requests:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    university_data = pending_requests[request_id]
    async with AsyncSessionLocal() as session:
        try:
            if action == "approve":
                await approve_request(request_id=request_id, university=university_data, session=session)
                response_text = f"‚úÖ –ó–∞—è–≤–∫–∞ –í–£–ó–∞ {university_data.baseInfo.shortName} –æ–¥–æ–±—Ä–µ–Ω–∞!"
            else:
                await reject_request(request_id, session)
                response_text = f"‚ùå –ó–∞—è–≤–∫–∞ –í–£–ó–∞ {university_data.baseInfo.shortName} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
            
            del pending_requests[request_id]
            
            await callback_query.message.edit_text(
                text=f"üîÑ {response_text}",
                reply_markup=None
            )
            await callback_query.answer(response_text)
            
            
        except Exception as e:
            # await session.rollback()
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
            
            
async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Bot shutting down..')