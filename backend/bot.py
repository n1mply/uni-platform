import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from database.read import get_requests, get_request_by_id
from db import AsyncSessionLocal
from core.config import settings
from services.request_service import approve_request_service, reject_request_service

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    if message.chat.id == settings.TELEGRAM_ADMIN_CHAT_ID:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

@dp.message(Command("requests"))
async def start_command(message: types.Message):
    await message.answer("üî® –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞—è–≤–∫–∏...")
    async with AsyncSessionLocal() as session:
        try:
            requests = await get_requests(session)
            for req in requests:
                
            
                contacts_text = f"<b>üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
                emoji_dict = {
                    'email' : '‚úâÔ∏è',
                    'phone' : 'üìû'
                }


                for contact in req.data['baseInfo']['contacts']:
                    contacts_text+=f"  <b>{contact['name']}</b>\n"
                    contacts_text+=f"    {emoji_dict[contact['type']]} {contact['value']}\n"
    
                message_text = (
                "<b>üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –í–£–ó–∞</b>:\n\n"
                f"<b>üèõÔ∏è –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {req.data['baseInfo']['fullName']}\n"
                f"<b>üîñ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {req.data['baseInfo']['shortName']}\n"
                f"<b>üè∑Ô∏è –¢–µ–≥:</b> {req.data['baseInfo']['universityTag']}\n\n"
                f"{contacts_text}\n"
                f"<b>üìç –ê–¥—Ä–µ—Å:</b> {req.data['baseInfo']['address']}\n"
                f"<b>üìå ID –∑–∞–ø—Ä–æ—Å–∞:</b> {req.id}"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{req.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req.id}")
        ]
    ])

                await bot.send_message(
                        chat_id=settings.TELEGRAM_ADMIN_CHAT_ID,
                        text=message_text or '–ù–µ—Ç –∑–∞—è–≤–æ–∫',
                        reply_markup=keyboard
                    )
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(e)


async def send_university_request(request_id: int):
    async with AsyncSessionLocal() as session:
        try:
            req = await get_request_by_id(session, id=request_id)
                
            contacts_text = f"<b>üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
            emoji_dict = {
                'email' : '‚úâÔ∏è',
                'phone' : 'üìû'
            }
    
            for contact in req.data['baseInfo']['contacts']:
                    contacts_text+=f"  <b>{contact['name']}</b>\n"
                    contacts_text+=f"    {emoji_dict[contact['type']]} {contact['value']}\n"
    
            message_text = (
                "<b>üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –í–£–ó–∞</b>:\n\n"
                f"<b>üèõÔ∏è –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {req.data['baseInfo']['fullName']}\n"
                f"<b>üîñ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {req.data['baseInfo']['shortName']}\n"
                f"<b>üè∑Ô∏è –¢–µ–≥:</b> {req.data['baseInfo']['universityTag']}\n\n"
                f"{contacts_text}\n"
                f"<b>üìç –ê–¥—Ä–µ—Å:</b> {req.data['baseInfo']['address']}\n"
                f"<b>üìå ID –∑–∞–ø—Ä–æ—Å–∞:</b> {req.id}"
                )

    
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{req.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req.id}")
        ]
    ])
    
            await bot.send_message(
                chat_id=settings.TELEGRAM_ADMIN_CHAT_ID,
                text=message_text,
                reply_markup=keyboard
    )
        except Exception as e:
            await bot.send_message(
                chat_id=settings.TELEGRAM_ADMIN_CHAT_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
                )

@dp.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def handle_approval(callback_query: types.CallbackQuery):
    request_id = int(callback_query.data.split('_')[1])
    action = callback_query.data.split('_')[0]

    async with AsyncSessionLocal() as session: 
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            request = await get_request_by_id(session, id=request_id)
            
            if not request:
                await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            if action == "approve":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                approved_request = await approve_request_service(request_id, session)
                response_text = f"‚úÖ –ó–∞—è–≤–∫–∞ –í–£–ó–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                rejected_request = await reject_request_service(request_id, session)
                response_text = f"‚ùå –ó–∞—è–≤–∫–∞ –í–£–ó–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
            
            await callback_query.message.edit_text(
                text=f"üîÑ {response_text}",
                reply_markup=None
            )
            await callback_query.answer(response_text)
            
        except Exception as e:
            await session.rollback()
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
            
            
async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Bot shutting down..')