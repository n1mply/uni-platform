# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from core.config import settings

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

pending_requests = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    if message.chat.id == settings.TELEGRAM_ADMIN_CHAT_ID:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

async def send_university_request(university_data: dict):
    university_id = university_data["id"]
    message_text = (
        "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –í–£–ó–∞:\n\n"
        f"üèõÔ∏è –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {university_data['full_name']}\n"
        f"üîñ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {university_data['short_name']}\n"
        f"üè∑Ô∏è –¢–µ–≥: {university_data['university_tag']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {university_data['address']}\n"
        f"üìå ID: {university_id}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{university_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{university_id}")
        ]
    ])
    
    pending_requests[university_id] = university_data
    
    await bot.send_message(
        chat_id=settings.TELEGRAM_ADMIN_CHAT_ID,
        text=message_text,
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def handle_approval(callback_query: types.CallbackQuery):
    university_id = int(callback_query.data.split('_')[1])
    action = callback_query.data.split('_')[0]
    
    if university_id not in pending_requests:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    university_data = pending_requests[university_id]
    
    if action == "approve":
        response_text = f"‚úÖ –ó–∞—è–≤–∫–∞ –í–£–ó–∞ {university_data['full_name']} –æ–¥–æ–±—Ä–µ–Ω–∞!"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
    else:
        response_text = f"‚ùå –ó–∞—è–≤–∫–∞ –í–£–ó–∞ {university_data['full_name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    del pending_requests[university_id]
    
    await callback_query.message.edit_text(
        text=f"üîÑ {callback_query.message.text}\n\n{response_text}",
        reply_markup=None
    )
    await callback_query.answer(response_text)